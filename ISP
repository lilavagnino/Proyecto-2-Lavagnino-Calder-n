/* USER CODE BEGIN Header */ //Lucia Lavagnino Calderon
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DIRECCION_DISPOSITIVO 0x55 // Dirección del dispositivo I2C
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// Menú
uint8_t seleccion_menu;
uint8_t opciones_usuario[1];

// SPI
uint8_t datos_led_tiempo[10];
uint8_t datos_spi[4];
uint8_t color_seleccionado;
uint8_t intervalo_tiempo;
char *posicion_coma;
char *cadena_led;
char *cadena_tiempo;

// I2C
uint8_t datos_sensor[4];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

void mostrarMenu(void) {
	// mi menu
    uint8_t texto_menu[] = "\nSeleccione una opcion \n";
    uint8_t opcion1[] = "1) Controlar dispositivo SPI \n";
    uint8_t opcion2[] = "2) Obtener medicion del Sensor I2C \n";

    // Enviar texto del menú por UART
    HAL_UART_Transmit(&huart2, texto_menu, sizeof(texto_menu), 100);
    HAL_UART_Transmit(&huart2, opcion1, sizeof(opcion1), 100);
    HAL_UART_Transmit(&huart2, opcion2, sizeof(opcion2), 100);
}

// Función de conexión SPI
void conexionSPI(uint8_t color, int duracion) {
    datos_spi[0] = color;
    datos_spi[1] = duracion;

    // Transmitir datos por SPI
    HAL_GPIO_WritePin(pinSpi_GPIO_Port, pinSpi_Pin, GPIO_PIN_RESET);
    HAL_SPI_Transmit(&hspi1, datos_spi, sizeof(datos_spi), HAL_MAX_DELAY);
    HAL_GPIO_WritePin(pinSpi_GPIO_Port, pinSpi_Pin, GPIO_PIN_SET);
}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */ // clock a 115200
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  // Inicialización del menú
 	  mostrarMenu();
 	  //recibe lo del usuario
 	  HAL_UART_Receive(&huart2, opciones_usuario, 1, HAL_MAX_DELAY);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Procesa la opción seleccionada por el usuario
	  opcion_elegida = opciones_usuario[0];

	  if (opcion_elegida == '1') {
	      uint8_t mensaje_prompt[] = "\nEscriba el número del LED y la duración separados por coma: 1. rojo 2. verde 3. amarillo\n";
	      HAL_UART_Transmit(&huart2, mensaje_prompt, sizeof(mensaje_prompt), 100);
	      HAL_UART_Receive(&huart2, configuracion_led_duracion, sizeof(configuracion_led_duracion), HAL_MAX_DELAY);

	      // Divide la cadena en número de LED y tiempo
	      ubicacion_coma = strchr((char *) configuracion_led_duracion, ',');

	      if (ubicacion_coma != NULL) {
	          *ubicacion_coma = '\0';
	          identificador_led = (char *) configuracion_led_duracion;
	          tiempo_cadena = ubicacion_coma + 1;

	          // Elimina espacios y caracteres extra alrededor de la duración
	          while (*tiempo_cadena == ' ' || *tiempo_cadena == '\n' || *tiempo_cadena == '\r') {
	              tiempo_cadena++;
	          }
	          char *fin_tiempo = tiempo_cadena + strlen(tiempo_cadena) - 1;
	          while (fin_tiempo >= tiempo_cadena && (*fin_tiempo == '\n' || *fin_tiempo == '\r' || *fin_tiempo == ' ')) {
	              *fin_tiempo-- = '\0';
	          }

	          // Convierte las cadenas a números enteros
	          tiempo_intervalo = atoi(tiempo_cadena) / 10;
	          color_led = atoi(identificador_led);

	          // Validación para asegurar valores válidos
	          if ((color_led >= 1 && color_led <= 3) && (tiempo_intervalo > 0)) {
	              enviarPorSPI(color_led, tiempo_intervalo); // Configura la conexión SPI
	          } else {
	              uint8_t mensaje_error[] = "Error: Asegúrese de ingresar valores válidos para el LED y la duración.\n";
	              HAL_UART_Transmit(&huart2, mensaje_error, sizeof(mensaje_error), 100);
	          }
	      } else {
	          uint8_t formato_invalido[] = "Error: Formato no válido.\n";
	          HAL_UART_Transmit(&huart2, formato_invalido, sizeof(formato_invalido), 100);
	      }

	      // Muestra el menú nuevamente
	      mostrarMenu();
	      HAL_UART_Receive(&huart2, opciones_usuario, 1, HAL_MAX_DELAY);

	  } else if (opcion_elegida == '2') {
	      HAL_I2C_Master_Receive(&hi2c1, (DIRECCION_DISPOSITIVO << 1) | 0x01, (uint8_t *)valor_sensor, 1, HAL_MAX_DELAY);

	      uint8_t mensaje_sensor[] = "\nEl valor leído del sensor es:\n";
	      HAL_UART_Transmit(&huart2, mensaje_sensor, sizeof(mensaje_sensor), HAL_MAX_DELAY);

	      sprintf((char *)valor_sensor, "%d\n", valor_sensor[0]);
	      HAL_UART_Transmit(&huart2, valor_sensor, strlen((char *)valor_sensor), HAL_MAX_DELAY);

	      HAL_Delay(1000);

	      // Vuelve a mostrar el menú
	      mostrarMenu();
	      HAL_UART_Receive(&huart2, opciones_usuario, 1, HAL_MAX_DELAY);

	  } else {
	      uint8_t mensaje_opcion_invalida[] = "\nError: Seleccione una opción válida\n";
	      HAL_UART_Transmit(&huart2, mensaje_opcion_invalida, sizeof(mensaje_opcion_invalida), 100);

	      mostrarMenu();
	      HAL_UART_Receive(&huart2, opciones_usuario, 1, HAL_MAX_DELAY);
	  }





    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pinSpi_GPIO_Port, pinSpi_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : pinSpi_Pin */
  GPIO_InitStruct.Pin = pinSpi_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(pinSpi_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
